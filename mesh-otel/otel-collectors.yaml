apiVersion: v1
kind: Namespace
metadata:
  name: observability
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "server"
    app: otlp-collector
  name: otlp-collector
  namespace: observability
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    component: "server"
    app: otlp-collector
  name: otlp-collector
  namespace: observability
rules:
  - apiGroups: [ "" ]
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - events
      - secrets
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "discovery.k8s.io" ]
    resources:
      - endpointslices
    verbs: [ "get", "list", "watch" ]
  - nonResourceURLs: [ "/metrics" ]
    verbs: [ "get" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    component: "server"
    app: otlp-collector
  name: otlp-collector
  namespace: observability
subjects:
  - kind: ServiceAccount
    name: otlp-collector
    namespace: observability
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otlp-collector
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-conf
  namespace: observability
  labels:
    app: opentelemetry
    component: otel-collector-conf
data:
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            endpoint: ${env:MY_POD_IP}:4318
    processors:
      cumulativetodelta:
      filter/histograms:
        error_mode: ignore
        metrics:
          metric:
            - 'type == METRIC_DATA_TYPE_HISTOGRAM'
      batch:
        send_batch_max_size: 1000
        send_batch_size: 100
        timeout: 10s
      memory_limiter:
        # 80% of maximum memory up to 2G
        limit_mib: 1500
        # 25% of limit up to 2G
        spike_limit_mib: 512
        check_interval: 5s
    extensions:
      zpages: {}
      memory_ballast:
        # Memory Ballast size should be max 1/3 to 1/2 of memory.
        size_mib: 683
      basicauth/otlp:
        client_auth:
          username: ${env:OTEL_GRAFANA_BASICAUTH_USERNAME}
          password: ${env:OTEL_GRAFANA_BASICAUTH_PASSWORD}
    connectors:
      datadog/connector:
    exporters:
      otlphttp/grafana:
        auth:
          authenticator: basicauth/otlp
        endpoint: ${env:OTEL_GRAFANA_ENDPOINT}
        tls:
          insecure: true
      datadog:
        api:
          site: ${env:OTEL_DD_SITE}
          key: ${env:OTEL_DD_API_KEY}
        host_metadata:
          enabled: false
      otlp/honeycomb:
        endpoint: ${env:OTEL_HONEYCOMB_ENDPOINT}
        headers:
          "x-honeycomb-team": ${env:OTEL_HONEYCOMB_API_KEY}
          "x-honeycomb-dataset": ${env:OTEL_HONEYCOMB_DATASET}
      otlphttp/dynatrace:
        endpoint: "${env:DT_OTLP_ENDPOINT}"
        headers:
          Authorization: "Api-Token ${env:DT_API_TOKEN}"
    service:
      telemetry:
        logs:
          level: INFO
        metrics:
          address: 0.0.0.0:8888
      extensions: [zpages, memory_ballast, basicauth/otlp]
      pipelines:
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlphttp/grafana, otlp/honeycomb, datadog]
        traces/1:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [otlphttp/grafana, otlp/honeycomb, datadog/connector, otlphttp/dynatrace]
        traces/2:
          receivers: [datadog/connector]
          processors: [batch]
          exporters: [datadog]
        metrics/dynatrace:
          receivers: [otlp]
          processors: [filter/histograms, batch, cumulativetodelta]
          exporters: [otlphttp/dynatrace]
        logs:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlphttp/grafana,  otlp/honeycomb, datadog, otlphttp/dynatrace]
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: observability
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  ports:
    - name: otlp-grpc # Default endpoint for OpenTelemetry gRPC receiver.
      port: 4317
      protocol: TCP
      targetPort: 4317
    - name: otlp-http # Default endpoint for OpenTelemetry HTTP receiver.
      port: 4318
      protocol: TCP
      targetPort: 4318
    - name: metrics # Default endpoint for querying metrics.
      port: 8888
  selector:
    component: otel-collector
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: observability
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  selector:
    matchLabels:
      app: opentelemetry
      component: otel-collector
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  replicas: 1 #TODO - adjust this to your own requirements
  template:
    metadata:
      labels:
        app: opentelemetry
        component: otel-collector
    spec:
      serviceAccountName: otlp-collector
      containers:
        - args:
            - "--config=/conf/otel-collector-config.yaml"
          image: otel/opentelemetry-collector-contrib:0.105.0
          name: otel-collector
          resources:
            limits:
              cpu: 1
              memory: 2Gi
            requests:
              cpu: 200m
              memory: 400Mi
          ports:
            - containerPort: 55679 # Default endpoint for ZPages.
            - containerPort: 4317 # Default endpoint for OpenTelemetry receiver.
            - containerPort: 14250 # Default endpoint for Jaeger gRPC receiver.
            - containerPort: 14268 # Default endpoint for Jaeger HTTP receiver.
            - containerPort: 9411 # Default endpoint for Zipkin receiver.
            - containerPort: 8888  # Default endpoint for querying metrics.
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: OTEL_GRAFANA_ENDPOINT
              value: https://otlp-gateway-prod-eu-west-2.grafana.net/otlp
            - name: OTEL_GRAFANA_BASICAUTH_USERNAME
              valueFrom:
                secretKeyRef:
                  name: otel-providers
                  key: grafana-user
            - name: OTEL_GRAFANA_BASICAUTH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: otel-providers
                  key: grafana-key
            - name: OTEL_DD_API_KEY
              valueFrom:
                secretKeyRef:
                  name: otel-providers
                  key: datadog-api-key
            - name: OTEL_DD_SITE
              value: datadoghq.eu # Change if you are in eu to datadog.eu or datadog.com if in US.
            - name: OTEL_HONEYCOMB_ENDPOINT
              value: api.honeycomb.io:443
            - name: OTEL_HONEYCOMB_DATASET
              value: test-metrics # Pick the dataset you want
            - name: OTEL_HONEYCOMB_API_KEY
              valueFrom:
                secretKeyRef:
                  name: otel-providers
                  key: honeycomb-api-key
            - name: DT_OTLP_ENDPOINT
              value: https://vsr29397.live.dynatrace.com/api/v2/otlp
            - name: DT_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: otel-providers
                  key: dynatrace-token
          volumeMounts:
            - name: otel-collector-config-vol
              mountPath: /conf
              readOnly: true
      volumes:
        - configMap:
            name: otel-collector-conf
            items:
              - key: config
                path: otel-collector-config.yaml
          name: otel-collector-config-vol
